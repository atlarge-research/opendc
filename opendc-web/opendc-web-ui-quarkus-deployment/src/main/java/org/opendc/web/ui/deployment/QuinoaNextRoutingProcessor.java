/*
 * Copyright (c) 2022 AtLarge Research
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package org.opendc.web.ui.deployment;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.quarkiverse.quinoa.deployment.items.BuiltResourcesBuildItem;
import io.quarkiverse.quinoa.deployment.items.ConfiguredQuinoaBuildItem;
import io.quarkiverse.quinoa.deployment.items.TargetDirBuildItem;
import io.quarkus.deployment.IsNormal;
import io.quarkus.deployment.annotations.BuildProducer;
import io.quarkus.deployment.annotations.BuildStep;
import io.quarkus.deployment.annotations.ExecutionTime;
import io.quarkus.deployment.annotations.Record;
import io.quarkus.vertx.http.deployment.HttpRootPathBuildItem;
import io.quarkus.vertx.http.deployment.RouteBuildItem;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.regex.Pattern;
import org.opendc.web.ui.runtime.QuinoaNextRoutingRecorder;

/**
 * Quarkus build processor for enabling dynamic routes and redirects in Quinoa for Next.js applications.
 */
public class QuinoaNextRoutingProcessor {
    private static final Pattern PATH_PARAM_PATTERN = Pattern.compile("\\[(\\w+)]");
    private final ObjectMapper objectMapper = new ObjectMapper();

    /**
     * Build the dynamic routes of the application based on the route manifest generated by Next.js.
     *
     * @param configuredQuinoa Quinoa configuration pointing to the UI directory.
     * @param targetDirBuildItem Dependency on the build directory to ensure the Next.js is built before this build step
     *                           is run.
     * @return Routing manifest generated by the Next.js application.
     */
    @BuildStep
    public NextRouteManifestBuildItem buildRoutes(
            ConfiguredQuinoaBuildItem configuredQuinoa, TargetDirBuildItem targetDirBuildItem) throws IOException {
        if (configuredQuinoa == null) {
            return null;
        }

        Path routeManifestPath = configuredQuinoa.uiDir().resolve(".next/routes-manifest.json");
        if (Files.notExists(routeManifestPath)) {
            throw new FileNotFoundException("Cannot find " + routeManifestPath + " for creating route map");
        }

        JsonNode routeManifest = objectMapper.readTree(routeManifestPath.toFile());

        var pages = new ArrayList<NextRouteManifestBuildItem.Page>();
        for (Iterator<JsonNode> it = routeManifest.get("staticRoutes").elements(); it.hasNext(); ) {
            JsonNode route = it.next();

            String page = route.get("page").asText();

            // Static routes do not have any path parameters
            pages.add(new NextRouteManifestBuildItem.Page(page, page));
        }

        for (Iterator<JsonNode> it = routeManifest.get("dynamicRoutes").elements(); it.hasNext(); ) {
            JsonNode route = it.next();

            String page = route.get("page").asText();
            String path = PATH_PARAM_PATTERN.matcher(page).replaceAll(r -> ":" + r.group(1));

            pages.add(new NextRouteManifestBuildItem.Page(path, page));
        }

        var redirects = new ArrayList<NextRouteManifestBuildItem.Redirect>();
        for (Iterator<JsonNode> it = routeManifest.get("redirects").elements(); it.hasNext(); ) {
            JsonNode redirect = it.next();
            if (redirect.has("internal")) {
                continue;
            }

            int statusCode = redirect.get("statusCode").asInt();
            String path = redirect.get("source").asText();
            String destination = redirect.get("destination").asText();

            if (path.isEmpty()) {
                path = "/";
            }

            redirects.add(new NextRouteManifestBuildItem.Redirect(path, destination, statusCode));
        }

        var custom404 = routeManifest.get("pages404").asBoolean();
        return new NextRouteManifestBuildItem(pages, redirects, custom404);
    }

    /**
     * Register the dynamic routes and redirects of the Next.js application.
     */
    @Record(ExecutionTime.RUNTIME_INIT)
    @BuildStep(onlyIf = IsNormal.class)
    public void registerNextRoutes(
            QuinoaNextRoutingRecorder recorder,
            BuildProducer<RouteBuildItem> routes,
            HttpRootPathBuildItem httpRootPathBuildItem,
            BuiltResourcesBuildItem uiResources,
            NextRouteManifestBuildItem routeManifestBuildItem) {

        if (uiResources.getNames().isEmpty()) {
            return;
        }

        String basePath = httpRootPathBuildItem.getRootPath();

        /* Construct redirects */
        for (var redirect : routeManifestBuildItem.getRedirects()) {
            String destination = basePath.equals("/") ? redirect.destination() : basePath + redirect.destination();

            routes.produce(httpRootPathBuildItem
                    .routeBuilder()
                    .route(basePath + redirect.path())
                    .handler(recorder.redirectHandler(destination, redirect.statusCode()))
                    .build());
        }

        /* Construct dynamic routes */
        for (var page : routeManifestBuildItem.getPages()) {
            routes.produce(httpRootPathBuildItem
                    .routeBuilder()
                    .route(basePath + page.path())
                    .handler(recorder.pageHandler(basePath, page.name()))
                    .build());
        }
    }
}
