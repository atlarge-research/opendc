name: Build

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]

jobs:
  build:
    name: Build (Java ${{ matrix.java }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        java: [11, 17]
        include:
          - os: windows-latest
            java: 17
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java }}
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build codeCoverageReport
          # Only write to the cache for builds on the 'main' branch.
          # Builds on other branches will only read existing entries from the cache.
          cache-read-only: ${{ github.ref != 'refs/heads/main' }}
      - name: Publish report
        if: always()
        uses: mikepenz/action-junit-report@v2
        with:
          check_name: test (Java ${{ matrix.java }})
          report_paths: '**/build/test-results/test/TEST-*.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload artifacts
        if: always()
        continue-on-error: true # See https://github.com/actions/upload-artifact/issues/270
        uses: actions/upload-artifact@v2
        with:
          name: reports-${{ matrix.os }}-jdk${{ matrix.java }}
          path: |
            ./**/build/reports/**/*
            ./**/build/test-results/**/*
          retention-days: 5
      - name: Upload code coverage
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./build/reports/jacoco/report.xml
          flags: simulator
  build-api:
    name: Build API (Python ${{ matrix.python }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python: [3.9]
    defaults:
      run:
        working-directory: opendc-web/opendc-web-api
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Lint with pylint
        run: ./check.sh
      - name: Test with pytest
        run: pytest --cov --cov-report=xml --junitxml=junit-report.xml
      - name: Publish report
        if: always()
        uses: mikepenz/action-junit-report@v2
        with:
          check_name: test (Python ${{ matrix.python }})
          report_paths: '**/junit-report.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload code coverage
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: opendc-web/opendc-web-api/coverage.xml
          flags: api
  build-ui:
    name: Build UI (Node ${{ matrix.node }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [16]
    defaults:
      run:
        working-directory: opendc-web/opendc-web-ui
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
      - run: yarn install --frozen-lockfile
      - run: yarn build
        env:
          CI: true
      - run: yarn next lint
        env:
          CI: true
